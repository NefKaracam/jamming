{"version":3,"sources":["util/Spotify.js","components/Track/Track.js","components/TrackList/TrackList.js","components/Playlist/Playlist.js","components/SearchBar/SearchBar.js","components/SearchResults/SearchResults.js","components/App/App.js","index.js","registerServiceWorker.js"],"names":["accessToken","Track","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addTrack","bind","assertThisInitialized","removeTrack","event","onAdd","track","onRemove","isRemoval","react_default","a","createElement","className","onClick","name","artist","album","renderAction","React","Component","TrackList","tracks","map","components_Track_Track","key","id","Playlist","handleNameChange","onNameChange","target","value","onChange","defaultValue","components_TrackList_TrackList","playlistTracks","onSave","SearchBar","state","term","handleTermChange","search","setState","onSearch","placeholder","SearchResults","searchResults","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","concat","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","_this2","find","savedTrack","push","filter","currentTrack","_this3","components_SearchBar_SearchBar","components_SearchResults_SearchResults","components_Playlist_Playlist","ReactDOM","render","components_App_App","document","getElementById","navigator","addEventListener","swUrl","process","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error"],"mappings":"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","file":"static/js/main.eb4d02e2.chunk.js","sourcesContent":["const clientId = '71b47624a3154f66b94eaa8fb95b2bdb'; \nconst redirectUri = 'https://nefkaracam.github.io/jamming/';\nlet accessToken;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    let userId;\n\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\n    ).then(response => response.json()\n    ).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({name: name})\n      }).then(response => response.json()\n      ).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({uris: trackUris})\n        });\n      });\n    });\n  }\n};\n\nexport default Spotify;\n","import React from 'react';\n\nimport './Track.css';\n\nclass Track extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n\n  addTrack(event) {\n    this.props.onAdd(this.props.track);\n  }\n\n  removeTrack(event) {\n    this.props.onRemove(this.props.track);\n  }\n\n  renderAction() {\n    if (this.props.isRemoval) {\n      return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n    }\n    return <button className=\"Track-action\" onClick={this.addTrack}>+</button>;\n  }\n\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\n        </div>\n        {this.renderAction()}\n      </div>\n    );\n  }\n}\n\nexport default Track;","import React from 'react';\n\nimport './TrackList.css';\n\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {\n  render() {\n    return (\n      <div className=\"TrackList\">\n        {\n          this.props.tracks.map(track => {\n            return <Track track={track}\n                          key={track.id}\n                          onAdd={this.props.onAdd}\n                          isRemoval={this.props.isRemoval}\n                          onRemove={this.props.onRemove} />\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default TrackList;","import React from 'react';\n\nimport './Playlist.css';\n\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n\n  handleNameChange(event) {\n    this.props.onNameChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input onChange={this.handleNameChange} defaultValue={'New Playlist'} />\n        <TrackList tracks={this.props.playlistTracks}\n                   isRemoval={true}\n                   onRemove={this.props.onRemove} />\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n      </div>\n    );\n  }\n}\n\nexport default Playlist;","import React from 'react';\n\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      term: ''\n    };\n\n    this.handleTermChange = this.handleTermChange.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  handleTermChange(event) {\n    this.setState({term: event.target.value});\n  }\n\n  search() {\n    this.props.onSearch(this.state.term);\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input placeholder=\"Enter A Song Title\" onChange={this.handleTermChange} />\n        <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;","import React from 'react';\n\nimport './SearchResults.css';\n\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} />\n      </div>\n    );\n  }\n}\n\nexport default SearchResults;","import React from 'react';\nimport './App.css';\n\nimport Playlist from '../Playlist/Playlist';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    };\n\n    this.search = this.search.bind(this);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults});\n    });\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({playlistTracks: tracks});\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults}\n                           onAdd={this.addTrack} />\n            <Playlist playlistName={this.state.playlistName}\n                      playlistTracks={this.state.playlistTracks}\n                      onNameChange={this.updatePlaylistName}\n                      onRemove={this.removeTrack}\n                      onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}